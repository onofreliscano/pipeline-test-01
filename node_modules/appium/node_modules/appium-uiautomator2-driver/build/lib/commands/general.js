"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _extensions = require("../extensions");

let extensions = {},
    commands = {},
    helpers = {};

commands.getPageSource = async function () {
  return await this.uiautomator2.jwproxy.command('/source', 'GET', {});
};

commands.getClipboard = async function () {
  return (await this.adb.getApiLevel()) < 29 ? await this.uiautomator2.jwproxy.command('/appium/device/get_clipboard', 'POST', {}) : await this.adb.getClipboard();
};

commands.doSendKeys = async function (params) {
  await this.uiautomator2.jwproxy.command('/keys', 'POST', params);
};

commands.keyevent = async function (keycode, metastate) {
  _logger.default.debug(`Ignoring metastate ${metastate}`);

  await this.adb.keyevent(keycode);
};

commands.back = async function () {
  await this.adb.keyevent(4);
};

commands.getStrings = async function (language) {
  if (!language) {
    language = await this.adb.getDeviceLanguage();

    _logger.default.info(`No language specified, returning strings for: ${language}`);
  }

  const preprocessStringsMap = function (mapping) {
    const result = {};

    for (const [key, value] of _lodash.default.toPairs(mapping)) {
      result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
    }

    return result;
  };

  if (this.apkStrings[language]) {
    return preprocessStringsMap(this.apkStrings[language]);
  }

  if (!this.opts.app && !this.opts.appPackage) {
    _logger.default.errorAndThrow("One of 'app' or 'appPackage' capabilities should must be specified");
  }

  let app = this.opts.app;
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    if (!app) {
      try {
        app = await this.adb.pullApk(this.opts.appPackage, tmpRoot);
      } catch (err) {
        _logger.default.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${err.message}`);
      }
    }

    if (!(await _appiumSupport.fs.exists(app))) {
      _logger.default.errorAndThrow(`The app at '${app}' does not exist`);
    }

    try {
      const {
        apkStrings
      } = await this.adb.extractStringsFromApk(app, language, tmpRoot);
      this.apkStrings[language] = apkStrings;
      return preprocessStringsMap(apkStrings);
    } catch (err) {
      _logger.default.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${err.message}`);
    }
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

commands.getWindowSize = async function () {
  return await this.uiautomator2.jwproxy.command('/window/current/size', 'GET', {});
};

commands.getWindowRect = async function () {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

extensions.executeMobile = async function (mobileCommand, opts = {}) {
  const mobileCommandsMapping = {
    shell: 'mobileShell',
    execEmuConsoleCommand: 'mobileExecEmuConsoleCommand',
    dragGesture: 'mobileDragGesture',
    flingGesture: 'mobileFlingGesture',
    doubleClickGesture: 'mobileDoubleClickGesture',
    longClickGesture: 'mobileLongClickGesture',
    pinchCloseGesture: 'mobilePinchCloseGesture',
    pinchOpenGesture: 'mobilePinchOpenGesture',
    swipeGesture: 'mobileSwipeGesture',
    scrollGesture: 'mobileScrollGesture',
    scrollBackTo: 'mobileScrollBackTo',
    scroll: 'mobileScroll',
    viewportScreenshot: 'mobileViewportScreenshot',
    viewportRect: 'mobileViewPortRect',
    deepLink: 'mobileDeepLink',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    acceptAlert: 'mobileAcceptAlert',
    dismissAlert: 'mobileDismissAlert',
    batteryInfo: 'mobileGetBatteryInfo',
    deviceInfo: 'mobileGetDeviceInfo',
    getDeviceTime: 'mobileGetDeviceTime',
    changePermissions: 'mobileChangePermissions',
    getPermissions: 'mobileGetPermissions',
    performEditorAction: 'mobilePerformEditorAction',
    startScreenStreaming: 'mobileStartScreenStreaming',
    stopScreenStreaming: 'mobileStopScreenStreaming',
    getNotifications: 'mobileGetNotifications',
    listSms: 'mobileListSms',
    type: 'mobileType',
    sensorSet: 'sensorSet',
    deleteFile: 'mobileDeleteFile',
    clearApp: 'mobileClearApp',
    startActivity: 'mobileStartActivity',
    startService: 'mobileStartService',
    stopService: 'mobileStopService',
    broadcast: 'mobileBroadcast',
    getContexts: 'mobileGetContexts',
    installMultipleApks: 'mobileInstallMultipleApks'
  };

  if (!_lodash.default.has(mobileCommandsMapping, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". ` + `Only ${_lodash.default.keys(mobileCommandsMapping)} commands are supported.`);
  }

  return await this[mobileCommandsMapping[mobileCommand]](opts);
};

commands.mobileViewportScreenshot = async function () {
  return await this.getViewportScreenshot();
};

commands.mobileViewPortRect = async function mobileViewPortRect() {
  return await this.getViewPortRect();
};

commands.setUrl = async function (url) {
  await this.adb.startUri(url, this.opts.appPackage);
};

commands.mobileDeepLink = async function (opts = {}) {
  const {
    url,
    package: pkg,
    waitForLaunch
  } = opts;
  return await this.adb.startUri(url, pkg, {
    waitForLaunch
  });
};

commands.openNotifications = async function () {
  return await this.uiautomator2.jwproxy.command('/appium/device/open_notifications', 'POST', {});
};

commands.updateSettings = async function (settings) {
  let driverOnlySettings = {};
  let serverSettings = {};

  for (let [setting, value] of _lodash.default.toPairs(settings)) {
    if (_appiumBaseDriver.BASEDRIVER_HANDLED_SETTINGS.includes(setting)) {
      driverOnlySettings[setting] = value;
    } else {
      serverSettings[setting] = value;
    }
  }

  if (!_lodash.default.isEmpty(driverOnlySettings)) {
    _logger.default.info(`Found some settings designed to be handled by BaseDriver: ` + `${JSON.stringify(_lodash.default.keys(driverOnlySettings))}. Not ` + `sending these on to the UiAutomator2 server and instead ` + `setting directly on the driver`);

    await this.settings.update(driverOnlySettings);
  }

  if (!_lodash.default.isEmpty(serverSettings)) {
    _logger.default.info('Forwarding the following settings to the UiAutomator2 server: ' + JSON.stringify(_lodash.default.keys(serverSettings)));

    await this.uiautomator2.jwproxy.command('/appium/settings', 'POST', {
      settings: serverSettings
    });
  }
};

commands.getSettings = async function () {
  const driverOnlySettings = this.settings.getSettings();
  const serverSettings = await this.uiautomator2.jwproxy.command('/appium/settings', 'GET');
  return { ...driverOnlySettings,
    ...serverSettings
  };
};

helpers.wrapBootstrapDisconnect = async function (wrapped) {
  await wrapped();
};

helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);
  this.jwpProxyActive = true;
};

commands.mobileGetDeviceInfo = async function () {
  return await this.uiautomator2.jwproxy.command('/appium/device/info', 'GET');
};

commands.mobileType = async function mobileType(opts = {}) {
  const {
    text
  } = opts;

  if (_lodash.default.isUndefined(text)) {
    _logger.default.errorAndThrow(`The 'text' argument is mandatory`);
  }

  return await this.adb.typeUnicode(text);
};

commands.mobileInstallMultipleApks = async function (opts = {}) {
  if (!_lodash.default.isArray(opts.apks) || _lodash.default.isEmpty(opts.apks)) {
    throw new _appiumBaseDriver.errors.InvalidArgumentError('No apks are given to install');
  }

  const apks = await _bluebird.default.all(opts.apks.map(app => this.helpers.configureApp(app, [_extensions.APK_EXTENSION])));
  await this.adb.installMultipleApks(apks, opts.options);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
